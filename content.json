[{"title":"Es6 let function","date":"2018-05-28T05:59:36.012Z","path":"/posts/a149d82f/","text":"块级绑定Var 变量声明和变量提升函数内定义Var变量，会自动提升到函数入口声明1234567891011121314151617function getValue(condition) &#123; if (condition) &#123; var value = &quot;blue&quot;; // other code return value; &#125; else &#123; // value exists here with a value of undefined return null; &#125; // value exists here with a value of undefined&#125; 块级声明Let 声明变量仅仅在当前块内有效，Let 声明必须在初始化之前1234if (condition) &#123; console.log(typeof value); // ReferenceError! let value = &quot;blue&quot;;&#125; 典型Let 解决循环问题1234567891011var funcs = [];for (let i = 0; i &lt; 10; i++) &#123; funcs.push(function() &#123; console.log(i); &#125;);&#125;funcs.forEach(function(func) &#123; func(); // outputs 0, then 1, then 2, up to 9&#125;) let 声明 循环中每次创建一个新的i.所以每个函数所带的参数都是自己的i，不会像Var一样变成10. 小结let声明变量仅仅在块内起作用，let在for-in,for-of循环中，会每次循环建立一哥新的绑定，也就意味着每次函数都会保存当前循环的变量 ####函数函数带默认值12345function makeRequest(url, timeout = 2000, callback = function() &#123;&#125;) &#123; // the rest of the function&#125; 函数参数带...123456789function pick(object, ...keys) &#123; let result = Object.create(null); for (let i = 0, len = keys.length; i &lt; len; i++) &#123; result[keys[i]] = object[keys[i]]; &#125; return result;&#125; ...可以拆解字符串和数组，函数因此可以不限制参数的数量，但是...参数必须是最后一个参数，因为不能确定参数的数量。例如：1Math.max(...array); #####箭头函数 没有this,super,arguments,new.target绑定 -this的值是由最近的非箭头函数确定 不能new 没有原型 this不能改变 没有this绑定由于this没有绑定，所以this 只能由上层作用域链决定12345678910111213var PageHandler = &#123; id: &quot;123456&quot;, init: function() &#123; document.addEventListener(&quot;click&quot;, event =&gt; this.doSomething(event.type), false); &#125;, doSomething: function(type) &#123; console.log(&quot;Handling &quot; + type + &quot; for &quot; + this.id); &#125;&#125;; 例子中的this由于离init最近，所以this与init相同，可以获取到dosomething.详细看ES6 this详解简单来说：普通函数this看调用者，箭头函数this看最近的父执行上下文。 函数尾递归优化递归函数最后调用自身，而不需要函数上下文环境。 小结函数默认参数，函数参数的数组拆解，箭头函数this指向","tags":[]},{"title":"Z'k First Page","date":"2018-03-15T13:13:26.147Z","path":"/posts/a149d82f/","text":"About thisAbout That","tags":[]},{"title":"Hello World","date":"2018-03-15T05:41:27.696Z","path":"/posts/4a17b156/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]